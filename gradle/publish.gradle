/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

// FIXME: Create a real "javadoc" JAR from the Dokka output
tasks.register("javadocJar", Jar) {
    archiveClassifier.set("javadoc")
    from()
}

publishing {
    repositories {
        maven { name = "testLocal"; url = "$rootProject.buildDir/m2" }
        maven {
            name = "awsCodeArtifact"
            url = project.findProperty("codeartifact.url")
            credentials {
                username = "aws"
                password = project.findProperty("codeartifact.token") ?: System.getenv("CODEARTIFACT_TOKEN")
            }
        }
        maven {
            name = "bespokeS3"
            url = "s3://bespoke-sdk-generation/release"
            credentials(AwsCredentials) {
                accessKey = project.findProperty("bespokeS3AccessKeyId")
                secretKey = project.findProperty("bespokeS3SecretAccessKey")
            }
        }
    }

    publications.all {
        project.afterEvaluate {
            pom {
                name = project.name
                description = project.description
                url = "https://github.com/awslabs/smithy-kotlin"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "smithy-kotlin"
                        name = "AWS SDK Kotlin Team"
                        // TODO - team email?
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/awslabs/smithy-kotlin.git"
                    developerConnection = "scm:git:ssh://github.com/awslabs/smith-kotlin.git"
                    url = "https://github.com/awslabs/smithy-kotlin"
                }

                artifact(tasks["javadocJar"])
            }
        }
    }

    if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
        signing {
            useInMemoryPgpKeys(
                    (String) project.property("signingKey"),
                    (String) project.property("signingPassword")
            )
            sign(publications)
        }
    }
}

tasks.register('publishToAwsCodeArtifact') {
    dependsOn 'publishAllPublicationsToAwsCodeArtifactRepository'
    group 'publishing'
}

tasks.register('publishToBespokeS3') {
    dependsOn 'publishAllPublicationsToBespokeS3Repository'
    group 'publishing'
}

def isAvailableForPublication(publication) {
    if (project.ext.has("skipPublish")) return false
    return !project.hasProperty("publishGroupName") ||
            publication.groupId.startsWith((String) project.property("publishGroupName"))
}

tasks.withType(AbstractPublishToMaven).all {
    onlyIf { isAvailableForPublication(publication) }
}
